.nav {
  position: fixed;
  bottom: 0;
  /* 이렇게하면 nav list의 플렉스가 없어진다 
  플렉스가 없어지는게 아니라 fixed를 사용하면 width가 줄어들어서 
  원래상태로 다시 늘려줘야 한다
  padding을 사용하면 내가 원했던 기존의 박스보다 더 커지게 된다.
   box-sizing: border-box;의 의미는 내가 padding을 줘도 기존의 박스 사이즈는 유지시켜줘
   더 늘리지 말아줘라는 의미
   간단하게 패딩에의해서 박스의 크기가 변하는 일이 없게해줘
   이문제의 순서 정리
   1.포지션 픽스트를 사용해서 정렬해놓은 가로의 크기가 최소한으로 붙어버렸다(div)->(span)으로 변함
   2. 붙은 크기를 화면을 강제적으로 100%센트 대로 채우기 위해서 width100%을 사용했다 그래서 밀려난다
   (패딩을 먼저 적용시키고 width:100%를 반영하려는 우선순위가 존재하는 것 같음)
   3. 하지만 padding이 적용되어있는 결과 패딩을 적용하고 100%센트를 만들어버려서 보이지 않는 컨텐츠가
   발생한다
   4.이를 box sizing을 박스의 원래 크기보다 과한 패딩을 적용하지 않기를 명령한다
  */
  width: 100%;
  background-color: #f9f9fa;
  padding: 20px 40px;
  box-sizing: border-box;
  border-top: 1px solid rgba(0, 0, 0, 0.2);
}
.nav__list {
  display: flex;
  justify-content: space-between;
}
.nav__link {
  position: relative;
  /* absolute를 받아줄 수 있게됨*/
}
@keyframes notificationAnimation {
  0% {
    transform: none;
  }
  50% {
    transform: translateY(-5px) rotateY(180deg);
  }
  100% {
    transform: none;
  }
}
.nav__notification {
  position: absolute;
  left: 18px;
  bottom: 12px;

  /* 이렇게 relative 부모를 지정하지 않으면 absolute후 좌표를 찍었을때 바디를 기준으로 움직임 */
  animation: notificationAnimation 2s ease-in-out infinite;
}

/* div태그로는 안에 컨텐트가 없더라도 width height을 통해서 그림 그릴 수 있다 */
@keyframes appearBtnAnimation {
  from {
    /* transform: translateY(70px); */
    opacity: 0;
    /* 처음에 위에서부터 밑으로 20px 밀어넣고 시작함 */
  }
  to {
    transform: none;
    opacity: 1;
  }
}
.nav__btn {
  transform: translateY(70px);
  opacity: 0;
  /* 이렇게 옮겨서 애초에 버튼들 위치를 바꿔놓기 
  만약에 이걸 애니메이션의 from에 넣고 시작하면
  아래 버튼들이 각각의 딜레이를 가짐으로 인해서
  동작이 부자연스럽다(딜레이를 기다리는 버튼들은 원래자리에 위치하고 기다리고 있어서
  어색한동작을 취함
  )
  */
  animation: appearBtnAnimation 0.5s ease-in-out forwards;
  /* forwards를 써줌으로서 유지시킴  */
}
.nav__btn:nth-child(2) {
  animation-delay: 0.2s;
}
.nav__btn:nth-child(3) {
  animation-delay: 0.3s;
}
.nav__btn:last-child {
  animation-delay: 0.4s;
}
